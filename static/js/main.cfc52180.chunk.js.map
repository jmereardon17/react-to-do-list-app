{"version":3,"sources":["components/AddTaskForm.js","components/Header.js","components/Task.js","components/App.js","index.js"],"names":["AddTaskForm","props","type","className","placeholder","onClick","handleSubmit","Header","title","lead","Task","taskId","id","status","isDone","task","onChange","e","handleCheckbox","checked","removeTask","App","store","require","state","tasks","storedTasks","localStorage","length","each","push","setState","prevState","preventDefault","input","document","querySelector","value","addTask","checkbox","target","label","parentNode","classList","add","updateTask","remove","prevTask","Math","max","apply","map","prevTaskId","set","newTask","get","filter","currentState","forEach","copiedTask","this","key","toString","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cfc52180.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst AddTaskForm = (props) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        className=\"task-field\"\r\n        placeholder=\"What needs doing?\"\r\n      />\r\n\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn add\"\r\n        onClick={ props.handleSubmit }>\r\n        Add Task\r\n    </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddTaskForm;","import React from 'react';\r\nimport AddTaskForm from './AddTaskForm';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"app-header\">\r\n      <h1 className=\"app-title\">{ props.title }</h1>\r\n      <h2 className=\"app-lead\">{ props.lead }</h2>\r\n      <AddTaskForm handleSubmit={ props.handleSubmit } />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n  const taskId = props.id;\r\n  const status = props.isDone\r\n\r\n  return (\r\n    <li className=\"task\">\r\n      <label className={`checkbox-container ${status ? \"strike\" : \"\"}`}>{props.task}\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"completed\"\r\n          onChange={(e) => props.handleCheckbox(taskId, e)}\r\n          checked={status}\r\n        />\r\n        <span className=\"checkmark\"></span>\r\n      </label>\r\n\r\n      <button className=\"btn delete\" onClick={ () => props.removeTask(taskId) }> x </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Task from './Task';\r\n\r\nclass App extends Component {\r\n\r\n  store = require('store');\r\n\r\n  state = {\r\n    tasks: []\r\n  };\r\n\r\n  storedTasks = () => {\r\n    let tasks = [];\r\n    const taskCount = localStorage.length;\r\n    if (taskCount > 0) {\r\n      this.store.each(task => {\r\n        tasks.push(task);\r\n      });\r\n    }\r\n    this.setState(prevState => {\r\n      return {\r\n        tasks: prevState.tasks = tasks\r\n      }\r\n    });  \r\n  }\r\n\r\n  componentDidMount() {\r\n    this.storedTasks()\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const input = document.querySelector('.task-field');\r\n    const task = input.value;\r\n    this.addTask(task);\r\n    input.value = '';\r\n  }\r\n\r\n  handleCheckbox = (taskId, e) => {\r\n    const checkbox = e.target;\r\n    const label = checkbox.parentNode;\r\n    if (checkbox.checked) {\r\n      label.classList.add('strike');\r\n      this.updateTask(taskId, true);\r\n    } else {\r\n      label.classList.remove('strike');\r\n      this.updateTask(taskId, false);\r\n    }\r\n  }\r\n\r\n  addTask = (task) => {\r\n    // set a variable to the highest task id number, or set it 0 if there are no tasks\r\n    let prevTask;\r\n    this.state.tasks.length > 0\r\n      ? prevTask = Math.max.apply(Math, this.state.tasks.map(task => { return task.id }))\r\n      : prevTask = 0;\r\n    // Update the task id counter by 1 to get a higher unique task id\r\n    const prevTaskId = prevTask += 1;\r\n    // Add task to storage\r\n    this.store.set(`task-${prevTaskId}`, { task: task, isDone: false, id: prevTaskId });\r\n    const newTask = this.store.get(`task-${prevTaskId}`);\r\n    // Update state\r\n    this.setState( prevState => ({\r\n        tasks: [\r\n          ...prevState.tasks,\r\n          newTask\r\n        ]\r\n       }\r\n    ));\r\n  }\r\n\r\n  removeTask = (taskId) => {\r\n    // Remove task from storage\r\n    this.store.remove(`task-${taskId}`);\r\n    // Update State\r\n    this.setState( prevState => {\r\n      return {\r\n        tasks: prevState.tasks.filter( task => task.id !== taskId)\r\n      }\r\n    });\r\n  }\r\n\r\n  updateTask = (taskId, status) => {\r\n    // copy current state\r\n    const { tasks } = { ...this.state };\r\n    // assign value to currentState\r\n    const currentState = tasks;\r\n    // loop over the array and find the task where the id matches the task id argument\r\n    currentState.forEach( task => {\r\n      if (task.id === taskId) {\r\n        // update the property isDone with boolean value\r\n        task.isDone = status;\r\n      }\r\n    });\r\n    // update state with the new value for the isDone property\r\n    this.setState( prevState => {\r\n      return {\r\n        tasks: prevState.tasks = currentState\r\n      }\r\n    });\r\n    // loop over storage and find the task where the id matches the task id argument\r\n    this.store.each((task) => {\r\n      if (task.id === taskId) {\r\n        // duplicate the original task object\r\n        const copiedTask = this.store.get(`task-${taskId}`);\r\n        // update the property isDone with boolean value\r\n        copiedTask.isDone = status;\r\n        // delete the original task from storage\r\n        this.store.remove(`task-${taskId}`);\r\n        // add the copied task with updated property\r\n        this.store.set(`task-${taskId}`, copiedTask);\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Header \r\n          title=\"To Do List\"\r\n          lead=\"An app built with React\"\r\n          handleSubmit={ this.handleSubmit }\r\n        />\r\n        <ul className=\"to-do-list\">\r\n          { this.state.tasks.map(task =>\r\n              <Task\r\n                task={ task.task }\r\n                id={ task.id }\r\n                key={ task.id.toString() }\r\n                handleCheckbox={ this.handleCheckbox }\r\n                isDone={ task.isDone }\r\n                removeTask={ this.removeTask }\r\n              />\r\n            )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}